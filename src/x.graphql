scalar DateTime

enum TweetCategory {
  Sport
  Finance
  Tech
  News
}

type User {
  id: String!
  username: String!
  email: String!
  tweets: [Tweet!]!
  groups: [Group!]!
}

type Group {
  id: String!
  userIds: [String!]!
  groupIds: [String!]!
}

type GroupMembership {
  id: String!
  group: Group!
  user: User
  subgroup: Group
}

type Tweet {
  id: String!
  createdAt: DateTime!
  authorId: String!
  content: String!
  hashtags: [String!]
  parentTweetId: String
  category: TweetCategory
  location: String
}

type TweetPermission {
  id: String!
  tweet: Tweet!
  permissionType: PermissionType!
  inherit: Boolean!
  group: Group
}

enum PermissionType {
  View
  Edit
}

input CreateGroupInput {
  userIds: [String!]!
  groupIds: [String!]!
}

input CreateTweetInput {
  authorId: String!
  content: String!
  hashtags: [String!]
  parentTweetId: String
  category: TweetCategory!
  location: String!
}

input UpdateTweetPermissionsInput {
  tweetId: String!
  inheritViewPermissions: Boolean!
  inheritEditPermissions: Boolean!
  viewPermissions: [String!]!
  editPermissions: [String!]!
}

type PaginatedTweet {
  nodes: [Tweet!]!
  hasNextPage: Boolean!
}

type Query {
  # Optional for testing
  user(id: String!): User!
  paginateTweets(userId: String!, limit: Int!, page: Int!): PaginatedTweet!
  canEditTweet(userId: String!, tweetId: String!): Boolean!
}

type Mutation {
  # Optional for testing
  createUser(username: String!, email: String!): User!
  # Requirement
  createGroup(input: CreateGroupInput!): Group!
  createTweet(input: CreateTweetInput!): Tweet!
  updateTweetPermissions(input: UpdateTweetPermissionsInput!): Boolean!
}
